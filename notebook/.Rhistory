set.seed(3343)
pValues = rep(NA,100)
for(i in 1:100){
z = rnorm(20)
x = rnorm(20)
y = rnorm(20,mean=0.5*x)
pValues[i] = summary(lm(y ~ x))$coef[2,4]
}
sum(pValues < 0.01)
sum(pValues < 0.1)
sum(p.adjust(pValues,method="bonferroni") < 0.1)
set.seed(44333)
x <- rnorm(50)
x <- rnorm(1000)
e <- rnorm(1000)
b0 <- 1; b1 <- 2
y0 <- b0 + b1*x + e
class(x)
x
mean(x)
x>mean(x)
x[x>mean(x)]=NA
x
y1 <- b0 + b1*x + e
y[y>mean(y)]=NA
yy
y
y2 <- b0 + b1*x + e
set.seed(44333)
x <- rnorm(1000)
x0 <- rnorm(1000)
e0 <- rnorm(1000)
b0 <- 1; b1 <- 2
y0 <- b0 + b1*x0 + e0
set.seed(44333)
x <- rnorm(1000)
e <- rnorm(1000)
x0 <- rnorm(1000)
e0 <- rnorm(1000)
b0 <- 1; b1 <- 2
y0 <- b0 + b1*x0 + e0
lm0<- lm(y0 ~ x0)
x1<-x0
x1[x1>mean(x1)]=NA
y1<-y0
lm1<- lm(y1 ~ x1)
x2<-x0
x2[x2>mean(x2)]=NA
y2<-y0
y2[y2>mean(y2)]=NA
lm2<- lm(y2 ~ x2)
summary(y1)
summary(lm0)
lm0
lm1
lm2
set.seed(44333)
x <- rnorm(1000)
e <- rnorm(1000)
x0 <- rnorm(1000)
e0 <- rnorm(1000)
b0 <- 1; b1 <- 2
y0 <- b0 + b1*x0 + e0
lm0<- lm(y0 ~ x0)
x1<-x0
x1[x1>mean(x1)]=NA
y1<-y0
lm1<- lm(y1 ~ x1)
x2<-x0
y2<-y0
y2[y2>mean(y2)]=NA
lm2<- lm(y2 ~ x2)
lmo
lm0
lm1
lm2
print('中文')
print('中文')
print('中文')
print('a')
source.with.encoding('~/Dropbox/R/program/Rweibo.r', encoding='UTF-8')
help(print)
a='中文'
a
print(a)
print '中文'
print ('中文')
print('的')
print('是')
q2=c(86,85,70,94,86,68)
summary(q2)
q4=c(1, 3, -6, -2, -99, 0, 10, 4, 7)
summary(q4)
q5=(5, 8, -4, 4, -6, 6, -2, 8, 10, 7)
q5=c(5, 8, -4, 4, -6, 6, -2, 8, 10, 7)
std(q5)
sd(q5)
q2=c(87,69,85,64,78,83)
summary(q)
summary(q2)
q2=c(86, 85, 70, 94 ,86, 68)
summary(q2)
boxplot(38.39,23.61,13.14,10.89,3.61,3.09,2.75,2.24,1.54,0.42,0.32,0.10,0.09)
boxplot(c(38.39,23.61,13.14,10.89,3.61,3.09,2.75,2.24,1.54,0.42,0.32,0.10,0.09))
hist(c(38.39,23.61,13.14,10.89,3.61,3.09,2.75,2.24,1.54,0.42,0.32,0.10,0.09))
a<-rnorm(10)
a
x<-rnorm(10)
y<-10x+2
y<-10*x+2
summary(y)
sd(y)
x<-rnorm(100000)
y<-10*x+2
mean(y)
sd(y)
x<-rbinom(10000,2,1/3)
mean(x)
1*(1/6)+2*(1/12)+3/12+4/3+5/6+6/6
x<-rnorm(10000,1,2)
y<-rnorm(10000,2,3)
z<-4*x-y+5
mean(z)
sd(z)
var(z)
4**2*2
y<-rnorm(10000,1,2)
x<-rnorm(10000,1,2)
y<-x+2
sd(y)
mean(y)
y<-2x
y<-2*x
sd(y)
mean(y)
x<-rnorm(10000,1,2)
y<-rnorm(10000,1,3)
sd(3x-y)
sd(3*x-y)
sd(3*x+y)
x<-rbinom(1000,20,0.4)
var(x)
sd(x)
(20*/4*3/4)**0.5
(20*4*3/4)**0.5
x<-rnorm(10000,1,2)
y<-rnorm(10000,2,3)
hist(x)
hist(y)
plot(x)
20*0.4*0.6
4.8**0.5
x<-c(1,4,9)
var(x)
x<-rbinom(1000,20,0.4)
sd(x)
20*0.4*0.6
x<-rnorm(1000,1,2)
mean(x*2)
sd(x*2)
sd(x*3)
mean(x*3)
154/385
source("http://www.openintro.org/stat/data/present.R")
present
present.to_csv('test.csv')
dim(present)
present.head
present.head(())
present$girls
present$girls.plot()
present$girls.plot
View(present)
install.packages(c("foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart", "survival"))
write.table(present, 'present.csv')
help(write.table)
write.table(present, 'present.csv', sep=',')
write.table(present, 'present.csv', sep=';')
write.table(present, 'present.xlxs')
write.table(present, 'present.xlsx')
write.table(present, 'present.xls')
write.csv(present, "present.csv", row.names=FALSE)
write.csv(present, "present.csv", row.names=FALSE, sep=';')
write.table(present, 'present.xls',row.names=FALSE,sep=';')
write.table(present, 'present.csv',row.names=FALSE,sep=';')
write.table(present, 'present.csv',row.names=FALSE,sep=',')
source("http://www.openintro.org/stat/data/cdc.R")
source("http://www.openintro.org/stat/data/cdc.R")
source("http://www.openintro.org/stat/data/cdc.R")
cdc
cdc.head(10)
head(cdc)
load(url("http://www.openintro.org/stat/data/kobe.RData"))
kobe
summary(y)
y
data(state)
state
data
statedata = cbind(data.frame(state.x77), state.abb, state.area, state.center,  state.division, state.name, state.region)
statedata
write.csv(statedata, 'state.csv')
statedata
data(state)
data(state)
state.abb
state.area
state
str(state)
quality = read.csv('https://courses.edx.org/c4x/MITx/15.071x/asset/quality.csv')
quality = read.csv(url.open('https://courses.edx.org/c4x/MITx/15.071x/asset/quality.csv'))
quality = read.csv(open('https://courses.edx.org/c4x/MITx/15.071x/asset/quality.csv'))
quality = read.csv(url('https://courses.edx.org/c4x/MITx/15.071x/asset/quality.csv'))
quality = read.csv(loda(url('https://courses.edx.org/c4x/MITx/15.071x/asset/quality.csv')))
quality = read.csv.url('https://courses.edx.org/c4x/MITx/15.071x/asset/quality.csv')
quality = read.table.url('https://courses.edx.org/c4x/MITx/15.071x/asset/quality.csv')
read.table.url("http://lib.stat.cmu.edu/jcgs/tu",skip=4,header=T)
quality = read.csv(url('https://courses.edx.org/c4x/MITx/15.071x/asset/quality.csv'))
install.packages("caTools")
library('RROC'))
library('RROC')
library('ROCR')
install.package('ROCR')
install.packages('ROCR')
setwd("/Volumes/Data/Users/riyukifeng/cloga.github.io/notebook")
loans = read.csv('loans.csv')
library(mice)
set.seed(144)
vars.for.imputation = setdiff(names(loans), "not.fully.paid")
imputed = complete(mice(loans[vars.for.imputation]))
loans[vars.for.imputation] = imputed
library(caTool)
library(caTools)
split = sample.split(loans$not.fully.paid, SplitRatio=0.7)
split
train = subset(loans, split==True)
train = subset(loans, split==TRUE)
test = subset(loans, split==FALSE)
model = glm(train$not.fully.paid ~ ., type="response")
model = glm(not.fully.paid ~ ., type="response", data=train)
model = glm(not.fully.paid ~ ., type="response", data=train, famly=binomail)
model = glm(not.fully.paid ~ ., type="response", data=train, famly=binomial)
model = glm(not.fully.paid ~ ., type="response", data=train, family=binomial)
model = glm(not.fully.paid ~ ., data=train, family=binomial)
predicted = predict(model, test, type='response')
ROCRpred = prediction(predicted, test$not.fully.paid)
library(ROCR)
ROCRpred = prediction(predicted, test$not.fully.paid)
demo(ROCR)
ROCRpred$AUC
ROCRpred.AUC
performance(ROCRpred, AUC)
performance(ROCRpred, measure = 'AUC')
performance(ROCRpred, measure = auc)
performance(ROCRpred, measure = 'auc')
model = glm(not.fully.paid ~ int.rate, data=train, family=binomial)
summary(model)
predicted = predict(model, test, type='response')
predicted
max(predicted)
predicted.length
predicted.len
len(predicted)
predicted.shape
help(predicted)
??predicted
str(predicted)
max(predicted)
summary(predicted)
table(test$not.fully.paid, predicted)
test$not.fully.paid_p=predicted
max(subset(test, test$not.fully.paid==0)$not.fully.paid_p)
max(subset(test, test$not.fully.paid==1)$not.fully.paid_p)
table(predicted>0.5)
ROCRpred = prediction(predicted, test$not.fully.paid)
performance(ROCRpred, measure = 'auc')
model = glm(not.fully.paid ~ int.rate, data=train, family=binomial)
predicted = predict(model, test, type='response')
bivariate = glm(not.fully.paid ~ int.rate, data=train, family=binomial)
pred.bivariate = predict(bivariate, newdata=test, type="response")
summary(pred.bivariate)
setwd("/Volumes/Data/Users/riyukifeng/cloga.github.io/notebook")
loans = read.csv('loans.csv')
library(mice)
set.seed(144)
vars.for.imputation = setdiff(names(loans), "not.fully.paid")
imputed = complete(mice(loans[vars.for.imputation]))
loans[vars.for.imputation] = imputed
library(caTools)
split = sample.split(loans$not.fully.paid, SplitRatio=0.7)
train = subset(loans, split==TRUE)
test = subset(loans, split==FALSE)
model = glm(not.fully.paid ~ ., data=train, family=binomial)
predicted = predict(model, test, type='response')
library(ROCR)
ROCRpred = prediction(predicted, test$not.fully.paid)
performance(ROCRpred, measure = 'auc')
bivariate = glm(not.fully.paid ~ int.rate, data=train, family=binomial)
summary(model)
pred.bivariate = predict(bivariate, newdata=test, type="response")
summary(pred.bivariate)
test$not.fully.paid_p=predicted
max(subset(test, test$not.fully.paid==1)$not.fully.paid_p)
summary(predicted)
table(predicted>0.5)
ROCRpred = prediction(predicted, test$not.fully.paid)
performance(ROCRpred, measure = 'auc')
ROCRpred = prediction(pred.bivariate, test$not.fully.paid)
performance(ROCRpred, measure = 'auc')
as.numeric(performance(prediction.bivariate, "auc")@y.values)
prediction.bivariate = prediction(pred.bivariate, test$not.fully.paid)
as.numeric(performance(prediction.bivariate, "auc")@y.values)
setwd("/Volumes/Data/Users/riyukifeng/cloga.github.io/notebook")
loans = read.csv('loans.csv')
library(mice)
set.seed(144)
vars.for.imputation = setdiff(names(loans), "not.fully.paid")
imputed = complete(mice(loans[vars.for.imputation]))
loans[vars.for.imputation] = imputed
library(caTools)
set.seed(144)
split = sample.split(loans$not.fully.paid, SplitRatio=0.7)
train = subset(loans, split==TRUE)
test = subset(loans, split==FALSE)
model = glm(not.fully.paid ~ ., data=train, family=binomial)
predicted = predict(model, test, type='response')
library(ROCR)
ROCRpred = prediction(predicted, test$not.fully.paid)
performance(ROCRpred, measure = 'auc')
bivariate = glm(not.fully.paid ~ int.rate, data=train, family=binomial)
summary(model)
pred.bivariate = predict(bivariate, newdata=test, type="response")
summary(pred.bivariate)
test$not.fully.paid_p=predicted
max(subset(test, test$not.fully.paid==1)$not.fully.paid_p)
summary(predicted)
table(predicted>0.5)
ROCRpred = prediction(pred.bivariate, test$not.fully.paid)
prediction.bivariate = prediction(pred.bivariate, test$not.fully.paid)
as.numeric(performance(prediction.bivariate, "auc")@y.values)
performance(ROCRpred, measure = 'auc')
model = glm(not.fully.paid ~ ., data=train, family=binomial)
predicted = predict(model, test, type='response')
library(ROCR)
ROCRpred = prediction(predicted, test$not.fully.paid)
performance(ROCRpred, measure = 'auc')
summary(model)
predicted.risk = predict(model, test, type='response')
ROCRpred = prediction(predicted.risk, test$not.fully.paid)
performance(ROCRpred, measure = 'auc')
bivariate = glm(not.fully.paid ~ int.rate, data=train, family=binomial)
pred.bivariate = predict(bivariate, newdata=test, type="response")
summary(pred.bivariate)
test$not.fully.paid_p=predicted
max(subset(test, test$not.fully.paid==1)$not.fully.paid_p)
ROCRpred = prediction(pred.bivariate, test$not.fully.paid)
prediction.bivariate = prediction(pred.bivariate, test$not.fully.paid)
as.numeric(performance(prediction.bivariate, "auc")@y.values)
10 * exp(0.06 * 3)
test$profit = exp(test$int.rate*3) - 1
test$profit[test$not.fully.paid == 1] = -1
summary(test$profit)
highInterest = subset(test, test$int.rate > 0.15)
highInterest
avg(highInterest)$profit
mean(highInterest)$profit
mean(highInterest$profit)
table(highInterest$not.fully.paid)
110/437
cutoff = sort(highInterest$predicted.risk, decreasing=FALSE)[100]
cutoff
highInterest$predicted.risk
highInterest
str(highInterest)
str(test)
predicted.risk = predict(model, test, type='response')
test$predicted.risk = predicted.risk
highInterest = subset(test, test$int.rate > 0.15)
mean(highInterest$profit)
table(highInterest$not.fully.paid)
cutoff = sort(highInterest$predicted.risk, decreasing=FALSE)[100]
cutoff
selectedLoans = subset(highInterest, highInterest$predicted.risk>cutoff)
mean(selectedLoans$profit)
table(selectedLoans$not.fully.paid)
selectedLoan
selectedLoans = subset(highInterest, highInterest$predicted.risk>cutoff)
mean(selectedLoans$profit)
table(selectedLoans$not.fully.paid)
92(245+92)
92/(245+92)
selectedLoans = subset(highInterest, highInterest$predicted.risk<cutoff)
mean(selectedLoans$profit)
table(selectedLoans$not.fully.paid)
18/99
selectedLoans = subset(highInterest, highInterest$predicted.risk<=cutoff)
mean(selectedLoans$profit)
table(selectedLoans$not.fully.paid)
sum(selectedLoans$profit)
